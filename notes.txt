Index.html -> systemjs.config.js -> main.ts -> app.module(AppModule) -> imports, declarations(components- eg. AppComponent), bootstrap

AppModule - imports BrowserModule that exposes many external things

Component: Template + JS Class(properties and methods) + Metadata(eg. : @Component decorator)

Template: 
    1. Inline - template property with '', "" or ``(back ticks)
    2. Linked - external file


Directive: Custom HTML element or attribute used to extend basic HTML
    1. Customs(eg. referencing a component as an html tag)
    2. Built-In

    1. Structural Directives(with asterisk): *ngIf, *ngFor
    2. 

Bindings
1. Interpolation: {{template_expression}} = one way binding
2. Property binding: [element.property] = "template_expression"
3. Event binding: (event) = "template_statement"
4. Two-way data binding: [(ngModel)] = "template_expression", where ngModel is called binding source

Using ngModel:
    - always make sure you import FormModule

Pipes: transform bound properties before displaying
    1. standard(date, number, decimal, percent, currency, json etc.)
    2. custom - decorating the class with @Pipe and implementing PipeTransform and then defining the Transform method
        eg. expression | customPipe: arg1, arg2

Components Lifecycle - the most important three are:
 - OnInit - to perform component initialization and to retrieve data
 - OnChanges - to perform action after change to input properties
 - OnDestroy - to perform cleanup before Angular destroys the component

module.id = sort of global variable when using the CommonJS module format
    - contains the absolute URL of the component class module file
    - requires:
        - writing modules in CommonJS format
        - using a module loader, such as SystemJS

@Input() decorator(applied to class property within the nested component) - used to pass data to a nested component from its container
    usage: <custom-component [input_property]='object.specificProperty'></custom-component>

@Output() decorator 
    - decorates properties of type EventEmitter<T>(Angular's event implementation)
    - used for sending data from nested component to parent(based on the T type specified for the event)

Service
= class with focused purpose
- used for features that :
    - are independent from any particular component
    - provide shared data or logic across components
    - encapsulates external interactions(eg. data access)
- usually used with the @Injectable() decorator, to allow being injectable as dependency
- can be registered as a provider(in providers array) at component level(root or nested) or module level, depending on the visibility needs

Angular Injector - used to inject different dependencies(such as services) usually by constructor

Observables(rely on Reactive Extensions - RxJS, as they are not implemented in ECMA Script 2015)
    Observables Operators = methods on observables that compose new observables
        - Transform the source observable in some way
        - process each value as it is emitted
        - eg : map, filter, take, merge,

Promise vs Observables
- Promise: provides single future value, not lazy, not cancellable
- Observable: emits multiple values over time, lazy, cancellable, supports map, filter, reduce and similar operators

Routings
- all views must be present in DOM(SPA principle), but only one is displayed at a time
- we configure a route for each component
- we activate a route based on user action => activating a route means displaying the component's view
- a component that is displayed via routing doesn't need a selector, unless is also used for nesting in another component
- requires to define a RouterModule in the corresponding Angular Module
-relies on the routerLink directive applied as an attribute of a clickable element, enclosed in [] and bound to a path from link parameters array 
    defined in the corresponding module 

RouterOutlet(<routerOutlet>)
- identifies where to display the routed component's view
- specified in the host component's template

Protecting against Routes with Guards:
- CanActivate - guard navigation to a route
- CanDeactivate - guard navigation from a route
- Resolve - prefetch data before activating a route
- CanLoad - prevent async routing

Angular Module
- class with @NgModule decorator
- organizes the pieces of an app and arranges them into blocks
- extends the app with capabilities from external libraries
- useful for aggregation and re-export
- declares and bootstraps: components, directives, pipes
- can import other modules
- registers providers, such as services

    Bootstrap Array
        - every app must bootstrap at least one component, the root application component
        - should be used only in the root application module

    Declaration Array
        - contains only components, directives and pipes
        - every component, directive and pipe must belong to one and only one Angular module
        - all declared components, directives and pipes are private by default. they are accessible to other components, directives and pipes 
            declared in the same module 

    Exports Array
        - exposing components, directives and pipes to other modules
        - re-export modules to re-export theur components, directives and pipes
        - we can re-export something without importing it first
        - services must never be exported

    Imports Array
        - allows importing external modules in current module
        - importing a module makes availalble any exported components, directives and pipes from that module
        - ony import modules that are needed
        - importing a module does not provide access to its imported modules

    Providers Array
        - registers services at module level
        - any services provider added to the providers array is registered at the root of the application 
            => are acessible to other custom modules defined in the app
        - don't add services to the providers array of a shared module
            => consider building a CoreModule for services and importing it one in the AppModule
        - routing guards must be added to the providers array of a module
