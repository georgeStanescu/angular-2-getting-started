Index.html -> systemjs.config.js -> main.ts -> app.module(AppModule) -> imports, declarations(components- eg. AppComponent), bootstrap

AppModule - imports BrowserModule that exposes many external things

Component: Template + JS Class(properties and methods) + Metadata(eg. : @Component decorator)

Template: 
    1. Inline - template property with '', "" or ``(back ticks)
    2. Linked - external file


Directive: Custom HTML element or attribute used to extend basic HTML
    1. Customs(eg. referencing a component as an html tag)
    2. Built-In

    1. Structural Directives(with asterisk): *ngIf, *ngFor
    2. 

Bindings
1. Interpolation: {{template_expression}} = one way binding
2. Property binding: [element.property] = "template_expression"
3. Event binding: (event) = "template_statement"
4. Two-way data binding: [(ngModel)] = "template_expression", where ngModel is called binding source

Using ngModel:
    - always make sure you import FormModule

Pipes: transform bound properties before displaying
    1. standard(date, number, decimal, percent, currency, json etc.)
    2. custom - decorating the class with @Pipe and implementing PipeTransform and then defining the Transform method
        eg. expression | customPipe: arg1, arg2

Components Lifecycle - the most important three are:
 - OnInit - to perform component initialization and to retrieve data
 - OnChanges - to perform action after change to input properties
 - OnDestroy - to perform cleanup before Angular destroys the component

module.id = sort of global variable when using the CommonJS module format
    - contains the absolute URL of the component class module file
    - requires:
        - writing modules in CommonJS format
        - using a module loader, such as SystemJS

@Input() decorator(applied to class property within the nested component) - used to pass data to a nested component from its container
    usage: <custom-component [input_property]='object.specificProperty'></custom-component>

@Output() decorator 
    - decorates properties of type EventEmitter<T>(Angular's event implementation)
    - used for sending data from nested component to parent(based on the T type specified for the event)

Service
= class with focused purpose
- used for features that :
    - are independent from any particular component
    - provide shared data or logic across components
    - encapsulates external interactions(eg. data access)
- usually used with the @Injectable() decorator, to allow being injectable as dependency
- can be registered as a provider(in providers array) at component level(root or nested) or module level, depending on the visibility needs

Angular Injector - used to inject different dependencies(such as services) usually by constructor